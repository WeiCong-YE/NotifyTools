package org.github.yippee.china_poem.poem2db.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import org.github.yippee.china_poem.poem2db.bean.SongCi;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ci".
*/
public class SongCiDao extends AbstractDao<SongCi, Long> {

    public static final String TABLENAME = "ci";

    /**
     * Properties of entity SongCi.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "value");
        public final static Property Author = new Property(1, String.class, "author", false, "AUTHOR");
        public final static Property Rhythmic = new Property(2, String.class, "rhythmic", false, "RHYTHMIC");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Pyquan = new Property(4, String.class, "pyquan", false, "PYQUAN");
        public final static Property Pyquany = new Property(5, String.class, "pyquany", false, "PYQUANY");
        public final static Property Pyjian = new Property(6, String.class, "pyjian", false, "PYJIAN");
    }


    public SongCiDao(DaoConfig config) {
        super(config);
    }
    
    public SongCiDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ci\" (" + //
                "\"value\" INTEGER PRIMARY KEY ," + // 0: id
                "\"AUTHOR\" TEXT," + // 1: author
                "\"RHYTHMIC\" TEXT," + // 2: rhythmic
                "\"CONTENT\" TEXT," + // 3: content
                "\"PYQUAN\" TEXT," + // 4: pyquan
                "\"PYQUANY\" TEXT," + // 5: pyquany
                "\"PYJIAN\" TEXT);"); // 6: pyjian
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ci\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SongCi entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(2, author);
        }
 
        String rhythmic = entity.getRhythmic();
        if (rhythmic != null) {
            stmt.bindString(3, rhythmic);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String pyquan = entity.getPyquan();
        if (pyquan != null) {
            stmt.bindString(5, pyquan);
        }
 
        String pyquany = entity.getPyquany();
        if (pyquany != null) {
            stmt.bindString(6, pyquany);
        }
 
        String pyjian = entity.getPyjian();
        if (pyjian != null) {
            stmt.bindString(7, pyjian);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SongCi entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(2, author);
        }
 
        String rhythmic = entity.getRhythmic();
        if (rhythmic != null) {
            stmt.bindString(3, rhythmic);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String pyquan = entity.getPyquan();
        if (pyquan != null) {
            stmt.bindString(5, pyquan);
        }
 
        String pyquany = entity.getPyquany();
        if (pyquany != null) {
            stmt.bindString(6, pyquany);
        }
 
        String pyjian = entity.getPyjian();
        if (pyjian != null) {
            stmt.bindString(7, pyjian);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SongCi readEntity(Cursor cursor, int offset) {
        SongCi entity = new SongCi( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // author
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // rhythmic
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pyquan
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pyquany
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // pyjian
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SongCi entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAuthor(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRhythmic(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPyquan(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPyquany(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPyjian(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SongCi entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SongCi entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SongCi entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
